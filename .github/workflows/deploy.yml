name: Deploy Assistant to OpenAI

on:
  push:
    paths:
      - assistant_config.json

jobs:
  deploy-assistant:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Deploy Assistant to OpenAI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Load the JSON file
          CONFIG_FILE="assistant_config.json"
          
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Configuration file not found!"
            exit 1
          fi

          # Validate JSON format
          if ! jq empty "$CONFIG_FILE"; then
            echo "Invalid JSON format in $CONFIG_FILE"
            exit 1
          fi

          # Extract the assistant ID (if exists)
          ASSISTANT_ID=$(jq -r '.id // empty' "$CONFIG_FILE")

          # Set API endpoint and headers
          API_URL="https://api.openai.com/v1/assistants"
          HEADERS=(
            -H "Authorization: Bearer $OPENAI_API_KEY"
            -H "Content-Type: application/json"
            -H "OpenAI-Beta: assistants=v2"
          )

          # Decide between CREATE (POST) or UPDATE (PATCH)
          if [ -n "$ASSISTANT_ID" ]; then
            echo "Updating assistant with ID: $ASSISTANT_ID"
            API_URL="$API_URL/$ASSISTANT_ID"
            METHOD="PATCH"

            # Remove fields not allowed in updates (like 'id')
            jq 'del(.id)' "$CONFIG_FILE" > temp_config.json
            CONFIG_FILE="temp_config.json"
          else
            echo "Creating a new assistant"
            METHOD="POST"
          fi
          )

      - name: Update the assistant using cURL (modify endpoint)
        run: |
          # Only send the fields you want to update
          MODIFIED_CONFIG=$(jq -r '.{name, instructions, ...}' "$CONFIG_FILE")  # Adjust selection as needed
          METHOD="POST"
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" "${HEADERS[@]}" -X $METHOD -d "$MODIFIED_CONFIG" "$API_URL")

          # Check response status
          if [ "$RESPONSE" -eq 200 ]; then
            echo "Assistant successfully updated!"
            cat response.json
          else
            echo "Failed to update assistant. HTTP Status: $RESPONSE"
            cat response.json
            exit 1
          fi
