name: Deploy Assistant to OpenAI

on:
  push:
    branches:
      - main
    paths: # Trigger only when assistant_config.json or instructions.txt changes
      - 'assistant_config.json'
      - 'instructions.txt'
      - 'eval_script.py'
      - 'test_cases.json'
      - 'deploy.yml'

jobs:
  create-temp-assistant:
    name: Create Temporary Assistant for Testing
    runs-on: ubuntu-latest
    outputs:
      assistant_id: ${{ steps.create-assistant.outputs.assistant_id }} # Output the created assistant ID

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Temporary Assistant
        id: create-assistant # Give this step an ID to reference its outputs
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          CONFIG_FILE="assistant_config.json"
          INSTRUCTIONS=$(cat instructions.txt | jq -Rs .)

          # Prepare JSON payload for creating a new assistant
          jq --arg instr "$INSTRUCTIONS" '
            del(.id, .object, .created_at, .updated_at) |
            if .reasoning_effort == null then del(.reasoning_effort) else . end |
            if .description == null then .description = "" else . end |
            if .tool_resources and .tool_resources.code_interpreter and .tool_resources.code_interpreter.file_ids == [""] then
              .tool_resources.code_interpreter.file_ids = []
            else . end |
            .instructions = $instr
          ' "$CONFIG_FILE" > temp_create_payload.json

          echo "Payload to be sent for new assistant:"
          cat temp_create_payload.json | jq .

          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "OpenAI-Beta: assistants=v2" \
            -d @temp_create_payload.json \
            "https://api.openai.com/v1/assistants")

          if [ "$RESPONSE" -eq 200 ]; then
            ASSISTANT_ID=$(jq -r '.id' response.json)
            echo "Temporary Assistant created successfully with ID: $ASSISTANT_ID"
            echo "assistant_id=$ASSISTANT_ID" >> $GITHUB_OUTPUT # Set the output variable
            cat response.json
          else
            echo "Failed to create temporary assistant: $RESPONSE"
            cat response.json
            exit 1
          fi

  run-tests:
    name: Run Tests
    needs: create-temp-assistant # This job now depends on the new job
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      # Pass the assistant_id from the previous job's output
      DEV_ASSISTANT_ID: ${{ needs.create-temp-assistant.outputs.assistant_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Create and activate venv, install deps, and run tests
        run: |
          python3 -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python eval_script.py
        continue-on-error: true # This will allow the delete-temp-assistant job to run even if tests fail

  delete-temp-assistant:
    name: Delete Temporary Assistant
    needs: run-tests # This job should run after tests
    runs-on: ubuntu-latest
    if: always() # This ensures the job runs even if previous jobs failed

    steps:
      - name: Delete Temporary Assistant
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Get the assistant ID from the output of the create-temp-assistant job
          ASSISTANT_ID_TO_DELETE: ${{ needs.create-temp-assistant.outputs.assistant_id }}
        run: |
          echo "Attempting to delete temporary assistant with ID: $ASSISTANT_ID_TO_DELETE"
          DELETE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -X DELETE \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "OpenAI-Beta: assistants=v2" \
            "https://api.openai.com/v1/assistants/$ASSISTANT_ID_TO_DELETE")

          if [ "$DELETE_RESPONSE" -eq 200 ]; then
            echo "Temporary Assistant $ASSISTANT_ID_TO_DELETE deleted successfully."
          else
            echo "Failed to delete temporary assistant $ASSISTANT_ID_TO_DELETE: HTTP $DELETE_RESPONSE"
          fi

  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    environment: development
    needs: [create-temp-assistant, run-tests] # Ensures tests are run before deploying to dev
    if: success() # Only deploy to dev if all previous jobs (including tests) passed

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy Assistant to Dev
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ASSISTANT_ID: ${{ secrets.DEV_ASSISTANT_ID }}
        run: |
          CONFIG_FILE="assistant_config.json"
          INSTRUCTIONS=$(cat instructions.txt | jq -Rs .)
          API_URL="https://api.openai.com/v1/assistants/$ASSISTANT_ID"

          # Prepare JSON payload:
          jq --arg instr "$INSTRUCTIONS" '
            del(.object) |
            if .reasoning_effort == null then del(.reasoning_effort) else . end |
            if .description == null then .description = "" else . end |
            if .tool_resources and .tool_resources.code_interpreter and .tool_resources.code_interpreter.file_ids == [""] then
              .tool_resources.code_interpreter.file_ids = []
            else . end |
            .instructions = $instr
          ' "$CONFIG_FILE" > temp_config.json

          echo "Payload to be sent:"
          cat temp_config.json | jq .

          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "OpenAI-Beta: assistants=v2" \
            -d @temp_config.json \
            "$API_URL")

          if [ "$RESPONSE" -eq 200 ]; then
            echo "Dev update successful!"
            cat response.json
          else
            echo "Dev update failed: $RESPONSE"
            cat response.json
            exit 1
          fi

  deploy-prod:
    name: Deploy to Prod
    needs: deploy-dev # This job now depends on deploy-dev
    if: success() # Only deploy to prod if deploy-dev passed
    runs-on: ubuntu-latest
    environment:
      name: production
      # Manual approval required via GitHub Environments

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy Assistant to Prod
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ASSISTANT_ID: ${{ secrets.PROD_ASSISTANT_ID }}
        run: |
          CONFIG_FILE="assistant_config.json"
          INSTRUCTIONS=$(cat instructions.txt | jq -Rs .)
          API_URL="https://api.openai.com/v1/assistants/$ASSISTANT_ID"

          # Prepare JSON payload:
          jq --arg instr "$INSTRUCTIONS" '
            del(.object) |
            if .reasoning_effort == null then del(.reasoning_effort) else . end |
            if .description == null then .description = "" else . end |
            if .tool_resources and .tool_resources.code_interpreter and .tool_resources.code_interpreter.file_ids == [""] then
              .tool_resources.code_interpreter.file_ids = []
            else . end |
            .instructions = $instr
          ' "$CONFIG_FILE" > temp_config.json

          echo "Payload to be sent:"
          cat temp_config.json | jq .

          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "OpenAI-Beta: assistants=v2" \
            -d @temp_config.json \
            "$API_URL")

          if [ "$RESPONSE" -eq 200 ]; then
            echo "Prod update successful!"
            cat response.json
          else
            echo "Prod update failed: $RESPONSE"
            cat response.json
            exit 1
          fi
