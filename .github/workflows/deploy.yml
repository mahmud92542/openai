name: Deploy Assistant to OpenAI

on:
  push:
    paths:
      - assistant_config.json

jobs:
  deploy-assistant:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install jq (optional if pre-installed)
        run: |
          sudo apt-get update
          sudo apt-get install jq

      - name: Validate Configuration JSON
        run: |
          CONFIG_FILE="assistant_config.json"

          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Configuration file not found!"
            exit 1
          fi

          if ! jq empty "$CONFIG_FILE"; then
            echo "Invalid JSON format in <span class="math-inline">CONFIG\_FILE"
exit 1
fi
\- name\: Extract Assistant ID \(if exists\)
id\: extract\-id
run\: \|
CONFIG\_FILE\="assistant\_config\.json"
ASSISTANT\_ID\=</span>(jq -r '.id // empty' "$CONFIG_FILE")
          echo "Assistant ID: $ASSISTANT_ID"
          echo "::set-output name=id::$ASSISTANT_ID"

      - name: Fetch Existing Assistant Configuration (if ID exists)
        id: fetch-existing
        if: steps.extract-id.outputs.id != ''
        env:
          OPENAI_API_KEY: <span class="math-inline">\{\{ secrets\.OPENAI\_API\_KEY \}\}
run\: \|
API\_URL\="https\://api\.openai\.com/v1/assistants/</span>{{ steps.extract-id.outputs.id }}"
          HEADERS=(
            -H "Authorization: Bearer <span class="math-inline">OPENAI\_API\_KEY"
\-H "Content\-Type\: application/json"
\-H "OpenAI\-Beta\: assistants\=v2"
\)
RESPONSE\=</span>(curl -s "${HEADERS[@]}" "$API_URL")
          echo "$RESPONSE" > existing_config.json
          echo "::set-output name=config::$RESPONSE"

      - name: Compare Configurations (if ID exists)
        if: steps.fetch-existing.outputs.config != ''
        run: |
          CONFIG_FILE="assistant_config.json"
          EXISTING_CONFIG="existing_config.json"

          if ! diff --identical /app/$CONFIG_FILE /app/$EXISTING_CONFIG &> /dev/null; then  # Use absolute paths
            echo "Configuration changes detected. Proceeding with update."
          else
            echo "No significant changes detected. Skipping update."
            exit 0
          fi

      - name: Deploy Assistant to OpenAI
        env:
          OPENAI_API_KEY: <span class="math-inline">\{\{ secrets\.OPENAI\_API\_KEY \}\}
run\: \|
CONFIG\_FILE\="assistant\_config\.json"
ASSISTANT\_ID\="</span>{{ steps.extract-id.outputs.id }}"

          # Set API endpoint and HTTP method
          if [ -n "$ASSISTANT_ID" ]; then
            echo "Updating assistant with ID: $ASSISTANT_ID"
            API_URL="https://api.openai.com/v1/assistants/$ASSISTANT_ID"
            METHOD="PUT"
            jq 'del(.id)' "$CONFIG_FILE" > temp_config.json  # Remove existing ID for update
            CONFIG_FILE="temp_config.json"
          else
            echo "Creating a new assistant"
            API_URL="https://api.openai.com/v1/assistants"
            METHOD="POST"
          fi

          # Deploy using cURL
          HEADERS=(
            -H "Authorization: Bearer $OPENAI_API_KEY"
            -H "Content-Type: application/json"
            -H "OpenAI-Beta: assistants=v2"
