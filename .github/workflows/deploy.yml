name: Deploy Assistant to OpenAI

on:
  push:
    paths:
      - assistant_config.json

jobs:
  deploy-assistant:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get Existing Assistant Configuration (Optional)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          API_URL="https://api.openai.com/v1/assistants/${{ secrets.ASSISTANT_ID }}"  # Replace with your assistant ID (if known)
          HEADERS=(
            -H "Authorization: Bearer $OPENAI_API_KEY"
            -H "Content-Type: application/json"
            -H "OpenAI-Beta: assistants=v2"
          )
          EXISTING_CONFIG=$(curl -s "${HEADERS[@]}" "$API_URL")

      - name: Validate JSON format
        run: |
          if ! jq empty "$CONFIG_FILE"; then
            echo "Invalid JSON format in $CONFIG_FILE"
            exit 1
          fi

      - name: Set API endpoint and headers
        run: |
          API_URL="https://api.openai.com/v1/assistants/$ASSISTANT_ID"  # Use existing ID if found
          HEADERS=(
            -H "Authorization: Bearer $OPENAI_API_KEY"
            -H "Content-Type: application/json"
            -H "OpenAI-Beta: assistants=v2"
          )

      - name: Update the assistant using cURL (modify endpoint)
        run: |
          # Only send the fields you want to update
          MODIFIED_CONFIG=$(jq -r '.{name, instructions, ...}' "$CONFIG_FILE")  # Adjust selection as needed
          METHOD="POST"
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" "${HEADERS[@]}" -X $METHOD -d "$MODIFIED_CONFIG" "$API_URL")

          # Check response status
          if [ "$RESPONSE" -eq 200 ]; then
            echo "Assistant successfully updated!"
            cat response.json
          else
            echo "Failed to update assistant. HTTP Status: $RESPONSE"
            cat response.json
            exit 1
          fi
