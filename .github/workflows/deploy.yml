name: Assistant CI/CD Pipeline

on:
  push:
    branches:
      - main # This will ONLY trigger the deploy-prod job (after manual approval)
  pull_request:
    branches:
      - main # This will trigger the CI part (temp assistant, tests, cleanup)

jobs:
  # CI Jobs: create-temp-assistant, run-tests, close-pr-on-failure, delete-temp-assistant
  # These jobs will ONLY run on pull_request events targeting 'main'
  create-temp-assistant:
    name: Create Temporary Assistant for Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' # ONLY run on pull requests
    outputs:
      assistant_id: ${{ steps.create-assistant-process.outputs.assistant_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Temporary Assistant and Capture ID
        id: create-assistant-process
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          set -euxo pipefail

          CONFIG_FILE="assistant_config.json"
          
          if [ ! -f "instructions.txt" ]; then
              echo "Error: instructions.txt not found!"
              exit 1
          fi
          
          SHORT_SHA="${GITHUB_SHA:0:7}"
          NAME_FROM_CONFIG=$(jq -r '.name // empty' "$CONFIG_FILE")
          
          if [ -z "$NAME_FROM_CONFIG" ]; then
            echo "Error: 'name' field missing or empty in $CONFIG_FILE"
            exit 1
          fi
          
          NEW_NAME="${SHORT_SHA}_${NAME_FROM_CONFIG}"
          INSTRUCTIONS=$(cat instructions.txt | jq -Rs .)

          if ! jq --arg instr "$INSTRUCTIONS" --arg newname "$NEW_NAME" '
            del(.id, .object, .created_at, .updated_at) |
            if .reasoning_effort == null then del(.reasoning_effort) else . end |
            if .description == null then .description = "" else . end |
            if .tool_resources and .tool_resources.code_interpreter and .tool_resources.code_interpreter.file_ids == [""] then
              .tool_resources.code_interpreter.file_ids = []
            else . end |
            .instructions = $instr |
            .name = $newname
          ' "$CONFIG_FILE" > temp_create_payload.json 2>&1; then
            echo "Error: jq failed to process '$CONFIG_FILE'."
            cat temp_create_payload.json
            exit 1
          fi

          if ! jq -e . temp_create_payload.json; then
              echo "Error: temp_create_payload.json is not valid JSON or is empty."
              cat temp_create_payload.json
              exit 1
          fi
          
          RESPONSE_HTTP_CODE=$(curl -s -o response.json -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "OpenAI-Beta: assistants=v2" \
            -d @temp_create_payload.json \
            "https://api.openai.com/v1/assistants")
          
          if [ "$RESPONSE_HTTP_CODE" -eq 200 ]; then
            ASSISTANT_ID_FINAL=$(jq -r '.id' response.json)
            
            if [ -z "$ASSISTANT_ID_FINAL" ]; then
                echo "Error: Assistant ID could not be extracted from response.json."
                cat response.json
                exit 1
            fi
            echo "Temporary Assistant created successfully with ID: $ASSISTANT_ID_FINAL"
            
            echo "assistant_id=$ASSISTANT_ID_FINAL" >> $GITHUB_OUTPUT
            echo "$ASSISTANT_ID_FINAL" > assistant_id.txt # Save ID to a file

          else
            echo "Failed to create temporary assistant: HTTP $RESPONSE_HTTP_CODE."
            cat response.json
            exit 1
          fi

      - name: Upload Assistant ID Artifact
        uses: actions/upload-artifact@v4
        with:
          name: assistant-id-artifact
          path: assistant_id.txt
          retention-days: 1

  run-tests:
    name: Run Tests
    needs: create-temp-assistant
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && success() # ONLY run on pull requests and if previous step succeeded
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DEV_ASSISTANT_ID: ${{ needs.create-temp-assistant.outputs.assistant_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Create and activate venv, install deps, and run tests
        run: |
          python3 -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Run pytest to execute your tests and ensure proper exit codes
          pytest test_eval_script.py
        # No 'continue-on-error: true' here

  close-pr-on-failure:
    name: Close Pull Request on Test Failure
    runs-on: ubuntu-latest
    # This job runs if 'run-tests' failed
    needs: run-tests
    if: github.event_name == 'pull_request' && failure() && github.event.pull_request.number
    permissions:
      pull-requests: write # Grant write permission to the GITHUB_TOKEN for closing PRs
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Close Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "Tests failed. Attempting to close Pull Request #$PR_NUMBER."
          # Use GitHub CLI to close the pull request
          gh pr close $PR_NUMBER --comment "This Pull Request has been automatically closed because the CI tests failed to meet the required pass percentage (below 80%). Please fix the issues and open a new PR."
          echo "Pull Request #$PR_NUMBER closed successfully."

  delete-temp-assistant:
    name: Delete Temporary Assistant
    needs: [run-tests, close-pr-on-failure] # Depend on both tests and closing PR, so it runs after them
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && always() # ONLY run on pull requests, always attempt cleanup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Assistant ID Artifact
        uses: actions/download-artifact@v4
        with:
          name: assistant-id-artifact
          path: .

      - name: Delete Temporary Assistant
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ ! -f "assistant_id.txt" ]; then
            echo "Error: assistant_id.txt artifact not found! Cannot delete assistant."
            exit 1
          fi
          
          ASSISTANT_ID_TO_DELETE=$(cat assistant_id.txt)
          
          if [ -z "$ASSISTANT_ID_TO_DELETE" ]; then
            echo "Error: ASSISTANT_ID_TO_DELETE is empty after reading from artifact. Assistant was likely not created successfully in a prior step."
            echo "Failing cleanup job to indicate a critical upstream issue."
            exit 1
          fi

          echo "Attempting to delete temporary assistant with ID: $ASSISTANT_ID_TO_DELETE"
          DELETE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -X DELETE \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "OpenAI-Beta: assistants=v2" \
            "https://api.openai.com/v1/assistants/$ASSISTANT_ID_TO_DELETE")

          if [ "$DELETE_RESPONSE" -eq 200 ]; then
            echo "Temporary Assistant $ASSISTANT_ID_TO_DELETE deleted successfully."
          else
            echo "Failed to delete temporary assistant $ASSISTANT_ID_TO_DELETE: HTTP $DELETE_RESPONSE"
            exit 1
          fi

  # Deployment Job: deploy-prod
  # This job will ONLY run on push events targeting 'main' (i.e., after a merge)
  deploy-prod:
    name: Deploy to Prod
    # This job does not need any of the CI jobs to have run successfully on a 'push' event,
    # as its trigger is independent.
    # It will only run if it's a 'push' to main.
    if: github.event_name == 'push' # ONLY run on push events
    runs-on: ubuntu-latest
    environment:
      name: production # This links to your GitHub Environment for manual approvals
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy Assistant to Prod
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ASSISTANT_ID: ${{ secrets.PROD_ASSISTANT_ID }}
        run: |
          CONFIG_FILE="assistant_config.json"
          if [ ! -f "instructions.txt" ]; then
              echo "Error: instructions.txt not found for production deployment!"
              exit 1
          fi
          INSTRUCTIONS=$(cat instructions.txt | jq -Rs .)
          API_URL="https://api.openai.com/v1/assistants/$ASSISTANT_ID"

          jq --arg instr "$INSTRUCTIONS" '
            del(.object) |
            if .reasoning_effort == null then del(.reasoning_effort) else . end |
            if .description == null then .description = "" else . end |
            if .tool_resources and .tool_resources.code_interpreter and .tool_resources.code_interpreter.file_ids == [""] then
              .tool_resources.code_interpreter.file_ids = []
            else . end |
            .instructions = $instr
          ' "$CONFIG_FILE" > temp_config.json

          echo "Payload to be sent:"
          cat temp_config.json | jq .

          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "OpenAI-Beta: assistants=v2" \
            -d @temp_config.json \
            "$API_URL")

          if [ "$RESPONSE" -eq 200 ]; then
            echo "Prod update successful!"
            cat response.json
          else
            echo "Prod update failed: HTTP $RESPONSE"
            cat response.json
            exit 1
          fi
