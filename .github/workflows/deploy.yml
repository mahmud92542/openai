name: Assistant CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  create-temp-assistant:
    name: Create Temporary Assistant for Testing
    runs-on: ubuntu-latest
    outputs:
      # This still refers to the 'create-assistant-process' step's output
      assistant_id: ${{ steps.create-assistant-process.outputs.assistant_id }} 

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Temporary Assistant and Capture ID
        id: create-assistant-process # This step will now use ::set-output
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          set -euxo pipefail

          CONFIG_FILE="assistant_config.json"
          
          if [ ! -f "instructions.txt" ]; then
              echo "Error: instructions.txt not found!"
              exit 1
          fi
          
          SHORT_SHA="${GITHUB_SHA:0:7}"
          NAME_FROM_CONFIG=$(jq -r '.name // empty' "$CONFIG_FILE")
          
          if [ -z "$NAME_FROM_CONFIG" ]; then
            echo "Error: 'name' field missing or empty in $CONFIG_FILE"
            exit 1
          fi
          
          NEW_NAME="${SHORT_SHA}_${NAME_FROM_CONFIG}"
          INSTRUCTIONS=$(cat instructions.txt | jq -Rs .)

          echo "--- Debug: Content of instructions.txt ---"
          cat instructions.txt
          echo "--- End instructions.txt content ---"
          
          echo "--- Debug: Running jq for payload creation ---"
          if ! jq --arg instr "$INSTRUCTIONS" --arg newname "$NEW_NAME" '
            del(.id, .object, .created_at, .updated_at) |
            if .reasoning_effort == null then del(.reasoning_effort) else . end |
            if .description == null then .description = "" else . end |
            if .tool_resources and .tool_resources.code_interpreter and .tool_resources.code_interpreter.file_ids == [""] then
              .tool_resources.code_interpreter.file_ids = []
            else . end |
            .instructions = $instr |
            .name = $newname
          ' "$CONFIG_FILE" > temp_create_payload.json 2>&1; then
            echo "Error: jq failed to process '$CONFIG_FILE'."
            echo "jq output (might contain error messages):"
            cat temp_create_payload.json
            exit 1
          fi
          echo "--- Debug: jq for payload creation completed ---"

          echo "Payload to be sent for new assistant:"
          if ! jq -e . temp_create_payload.json; then
              echo "Error: temp_create_payload.json is not valid JSON or is empty."
              cat temp_create_payload.json
              exit 1
          fi
          
          echo "--- Debug: Making API call to OpenAI ---"
          RESPONSE_HTTP_CODE=$(curl -s -o response.json -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "OpenAI-Beta: assistants=v2" \
            -d @temp_create_payload.json \
            "https://api.openai.com/v1/assistants")
          echo "--- Debug: API call completed ---"
          
          if [ "$RESPONSE_HTTP_CODE" -eq 200 ]; then
            ASSISTANT_ID_FINAL=$(jq -r '.id' response.json)
            
            if [ -z "$ASSISTANT_ID_FINAL" ]; then
                echo "Error: Assistant ID could not be extracted from response.json. Response content:"
                cat response.json
                exit 1
            fi
            echo "Temporary Assistant created successfully with ID: $ASSISTANT_ID_FINAL"
            echo "--- Debug: Full OpenAI API success response ---"
            cat response.json
            echo "--- End OpenAI API response ---"
            
            # --- CRITICAL CHANGE HERE ---
            # Use the deprecated but sometimes more reliable ::set-output command
            echo "::set-output name=assistant_id::${ASSISTANT_ID_FINAL}"
            echo "--- Debug: assistant_id set as step output via ::set-output: $ASSISTANT_ID_FINAL ---"

          else
            echo "Failed to create temporary assistant: HTTP $RESPONSE_HTTP_CODE. Response content:"
            cat response.json
            exit 1
          fi

  run-tests:
    name: Run Tests
    needs: create-temp-assistant
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      # This mapping is correct and seems to be working for this job
      DEV_ASSISTANT_ID: ${{ needs.create-temp-assistant.outputs.assistant_id }} 

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Create and activate venv, install deps, and run tests
        run: |
          echo "Debug: DEV_ASSISTANT_ID is '$DEV_ASSISTANT_ID'"
          python3 -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python eval_script.py # eval_script.py uses os.getenv("DEV_ASSISTANT_ID")

        continue-on-error: true

  delete-temp-assistant:
    name: Delete Temporary Assistant
    needs: run-tests # Depends on tests, so it runs after them
    runs-on: ubuntu-latest
    if: always() # Always attempt cleanup

    steps:
      - name: Debug Output Variable from Previous Job
        run: |
          # The key diagnostic: Is the ID making it here?
          echo "Debug: Value from create-temp-assistant job outputs directly: '${{ needs.create-temp-assistant.outputs.assistant_id }}'"

      - name: Delete Temporary Assistant
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # The ID is passed into the environment variable for this specific step
          ASSISTANT_ID_TO_DELETE: ${{ needs.create-temp-assistant.outputs.assistant_id }} 
        run: |
          # --- DEBUGGING INSIDE RUN BLOCK ---
          echo "--- DEBUG: Inside Delete Temporary Assistant run block ---"
          echo "Value of ASSISTANT_ID_TO_DELETE (from step env): '$ASSISTANT_ID_TO_DELETE'"
          echo "Length of ASSISTANT_ID_TO_DELETE: ${#ASSISTANT_ID_TO_DELETE}"
          echo "--- END DEBUG ---"

          if [ -z "$ASSISTANT_ID_TO_DELETE" ]; then
            echo "Error: ASSISTANT_ID_TO_DELETE is empty. Assistant was likely not created successfully in a prior step."
            echo "Failing cleanup job to indicate a critical upstream issue."
            exit 1 # Fail the job if ID is missing
          fi

          echo "Attempting to delete temporary assistant with ID: $ASSISTANT_ID_TO_DELETE"
          DELETE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -X DELETE \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "OpenAI-Beta: assistants=v2" \
            "https://api.openai.com/v1/assistants/$ASSISTANT_ID_TO_DELETE")

          if [ "$DELETE_RESPONSE" -eq 200 ]; then
            echo "Temporary Assistant $ASSISTANT_ID_TO_DELETE deleted successfully."
          else
            echo "Failed to delete temporary assistant $ASSISTANT_ID_TO_DELETE: HTTP $DELETE_RESPONSE"
            exit 1
          fi

  deploy-prod:
    name: Deploy to Prod
    needs: run-tests
    if: success()
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy Assistant to Prod
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ASSISTANT_ID: ${{ secrets.PROD_ASSISTANT_ID }}
        run: |
          CONFIG_FILE="assistant_config.json"
          if [ ! -f "instructions.txt" ]; then
              echo "Error: instructions.txt not found for production deployment!"
              exit 1
          fi
          INSTRUCTIONS=$(cat instructions.txt | jq -Rs .)
          API_URL="https://api.openai.com/v1/assistants/$ASSISTANT_ID"

          jq --arg instr "$INSTRUCTIONS" '
            del(.object) |
            if .reasoning_effort == null then del(.reasoning_effort) else . end |
            if .description == null then .description = "" else . end |
            if .tool_resources and .tool_resources.code_interpreter and .tool_resources.code_interpreter.file_ids == [""] then
              .tool_resources.code_interpreter.file_ids = []
            else . end |
            .instructions = $instr
          ' "$CONFIG_FILE" > temp_config.json

          echo "Payload to be sent:"
          cat temp_config.json | jq .

          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "OpenAI-Beta: assistants=v2" \
            -d @temp_config.json \
            "$API_URL")

          if [ "$RESPONSE" -eq 200 ]; then
            echo "Prod update successful!"
            cat response.json
          else
            echo "Prod update failed: HTTP $RESPONSE"
            cat response.json
            exit 1
          fi
