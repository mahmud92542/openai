name: Assistant CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  create-temp-assistant:
    runs-on: ubuntu-latest
    outputs:
      assistant_id: ${{ steps.create-assistant-process.outputs.assistant_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Temporary Assistant and Capture ID
        id: create-assistant-process
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          set -euxo pipefail

          CONFIG_FILE="assistant_config.json"

          SHORT_SHA="${GITHUB_SHA:0:6}"
          NAME_FROM_CONFIG=$(jq -r '.name // empty' "$CONFIG_FILE")
          if [ -z "$NAME_FROM_CONFIG" ]; then
            echo "Error: 'name' field missing or empty in $CONFIG_FILE"
            exit 1
          fi
          NEW_NAME="${SHORT_SHA}_${NAME_FROM_CONFIG}"

          INSTRUCTIONS=$(cat instructions.txt | jq -Rs .)

          jq --arg instr "$INSTRUCTIONS" --arg newname "$NEW_NAME" '
            del(.id, .object, .created_at, .updated_at) |
            if .reasoning_effort == null then del(.reasoning_effort) else . end |
            if .description == null then .description = "" else . end |
            if .tool_resources and .tool_resources.code_interpreter and .tool_resources.code_interpreter.file_ids == [""] then
              .tool_resources.code_interpreter.file_ids = []
            else . end |
            .instructions = $instr |
            .name = $newname
          ' "$CONFIG_FILE" > temp_create_payload.json

          RESPONSE_HTTP_CODE=$(curl -s -o response.json -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "OpenAI-Beta: assistants=v2" \
            -d @temp_create_payload.json \
            "https://api.openai.com/v1/assistants")

          if [ "$RESPONSE_HTTP_CODE" -eq 200 ]; then
            ASSISTANT_ID_FINAL=$(jq -r '.id' response.json)
            if [ -z "$ASSISTANT_ID_FINAL" ]; then
              echo "Error: Assistant ID could not be extracted from response.json."
              exit 1
            fi
            echo "assistant_id=$ASSISTANT_ID_FINAL" >> $GITHUB_OUTPUT
          else
            echo "Failed to create assistant, HTTP $RESPONSE_HTTP_CODE"
            cat response.json
            exit 1
          fi



  run-tests:
    name: Run Tests
    needs: create-temp-assistant
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DEV_ASSISTANT_ID: ${{ needs.create-temp-assistant.outputs.assistant_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Create and activate venv, install deps, and run tests
        run: |
          echo "Debug: DEV_ASSISTANT_ID is $DEV_ASSISTANT_ID"
          python3 -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python eval_script.py
        continue-on-error: true


  delete-temp-assistant:
    name: Delete Temporary Assistant
    needs: run-tests
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Debug Output Variable
        run: |
          echo "assistant_id from previous job: '${{ needs.create-temp-assistant.outputs.assistant_id }}'"
        env:
          ASSISTANT_ID_TO_DELETE: ${{ needs.create-temp-assistant.outputs.assistant_id }}

      - name: Delete Temporary Assistant
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ASSISTANT_ID_TO_DELETE: ${{ needs.create-temp-assistant.outputs.assistant_id }}
        run: |
          if [ -z "$ASSISTANT_ID_TO_DELETE" ]; then
            echo "Error: ASSISTANT_ID_TO_DELETE is empty. Cannot delete temporary assistant."
            exit 1
          fi

          echo "Deleting temporary assistant with ID: $ASSISTANT_ID_TO_DELETE"
          DELETE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -X DELETE \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "OpenAI-Beta: assistants=v2" \
            "https://api.openai.com/v1/assistants/$ASSISTANT_ID_TO_DELETE")

          if [ "$DELETE_RESPONSE" -eq 200 ]; then
            echo "Deleted assistant $ASSISTANT_ID_TO_DELETE successfully."
          else
            echo "Failed to delete assistant $ASSISTANT_ID_TO_DELETE: HTTP $DELETE_RESPONSE"
            exit 1
          fi


  deploy-prod:
    name: Deploy to Prod
    needs: run-tests
    if: success()
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy Assistant to Prod
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ASSISTANT_ID: ${{ secrets.PROD_ASSISTANT_ID }}
        run: |
          CONFIG_FILE="assistant_config.json"
          INSTRUCTIONS=$(cat instructions.txt | jq -Rs .)
          API_URL="https://api.openai.com/v1/assistants/$ASSISTANT_ID"

          jq --arg instr "$INSTRUCTIONS" '
            del(.object) |
            if .reasoning_effort == null then del(.reasoning_effort) else . end |
            if .description == null then .description = "" else . end |
            if .tool_resources and .tool_resources.code_interpreter and .tool_resources.code_interpreter.file_ids == [""] then
              .tool_resources.code_interpreter.file_ids = []
            else . end |
            .instructions = $instr
          ' "$CONFIG_FILE" > temp_config.json

          echo "Payload to be sent:"
          cat temp_config.json | jq .

          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "OpenAI-Beta: assistants=v2" \
            -d @temp_config.json \
            "$API_URL")

          if [ "$RESPONSE" -eq 200 ]; then
            echo "Prod update successful!"
            cat response.json
          else
            echo "Prod update failed: HTTP $RESPONSE"
            cat response.json
            exit 1
          fi
